type Query {
  info: String!
  newPartList(filter: String): NewPartList!
  feed(filter: String, skip: Int, take: Int, orderBy: LinkOrderByInput): Feed!
}

type Feed {
  id: ID!
  links: [Link!]!
  count: Int!
}

type NewPartList {
  id: ID!
  lists: [NewPart!]!
  count: Int!
}

type NewPart {
  id: ID!
  model: String!
  partNo: String!
  vender: Vender
  category: String
  type: String
  sequence: Int
  status: String
  requester: User
  planner: User
  tester: User
  User: [User]
  createdAt: DateTime!
}

type Vender {
  id: ID!
  name: String!
  code: String!
  addedBy: User
  createdAt: DateTime!
}

type Mutation {
  post(url: String!, description: String!): Link!
  addNewPart(
    model: String!
    partNo: String!
    venderId: ID!
    category: String!
    type: String!
    sequence: Int
    status: String
    plannerId: ID!
    testerId: ID!
  ): NewPart!
  addVender(name: String!, code: String!): Vender!
  deletePost(id: ID): Link
  signup(
    email: String!
    department: String!
    password: String!
    name: String!
  ): AuthPayload
  login(email: String!, password: String!): AuthPayload
  vote(linkId: ID!): Vote
}

type Subscription {
  newLink: Link
  newVote: Vote
}

type AuthPayload {
  token: String
  user: User
}

type User {
  id: ID!
  name: String!
  email: String!
  department: String!
  links: [Link!]!
  newParts: [NewPart!]!
  votes: Vote
}

type Link {
  id: ID!
  description: String!
  url: String!
  postedBy: User
  votes: [Vote!]!
  createdAt: DateTime!
}

type Vote {
  id: ID!
  link: Link!
  user: User!
}

input LinkOrderByInput {
  description: Sort
  url: Sort
  createdAt: Sort
}

enum Sort {
  asc
  desc
}

scalar DateTime
